
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;

/**
 * @description:
 * @author: 80261504 xpc
 * @date: 2021/9/24 10:37
 */
public class ListNodeTest {

    @Test
    public void test(){
        ListNode l1=generateL1();
        ListNode l2=generateL2();
       // System.out.println(printListNode(addTwoNumbers(l1,l2)));
      //  System.out.println(printListNode(merge2ListNode(l1,l2)));
   //    System.out.println(printListNode(swapNode(l1)));
        System.out.println(printListNode(l1));
    //   System.out.println(printListNode(reversK(l1,2)));
     //   System.out.println(printListNode(rotateRight(l2,4)));
      //  System.out.println(printListNode(deleteDuplicate(l1)));
    //   System.out.println(printListNode(reverseBetween(l1,2,4)));
        System.out.println(printListNode(partition(l1,3)));

    }

    //合并两个升序链表->合并k个升序链表
    public  ListNode merge2ListNode(ListNode l1,ListNode l2){
        if(l1==null||l2==null){
            return l1==null?l2:l1;
        }
        ListNode head=new ListNode(-1);
        ListNode current=head;
        while(l1!=null && l2!=null){
            if(l1.val<=l2.val){
                current.next=l1;
                l1=l1.next;
            }else {
              current.next=l2;
              l2=l2.next;
            }
            current=current.next;
        }
        current.next = l1==null?l2:l1;
        return head.next;
    }

    //两数相加
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head=new ListNode(-1);
        ListNode current=head;
        int carry=0;
        while (l1!=null||l2!=null){
            int v1=l1==null?0:l1.val;
            int v2=l2==null?0:l2.val;
            int sum=v1+v2+carry;
            carry=sum/10;
            sum=sum%10;
            current.next=new ListNode(sum);
            current=current.next;
            if(l1!=null){
                l1=l1.next;
            }
            if(l2!=null){
                l2=l2.next;
            }
        }
        //遍历完两个链表，仍存在进位需额外添加一个接点
        if(carry==1){
            current.next=new ListNode(carry);
        }
        return head.next;
    }

    //两两交换链表
    public ListNode swapNode(ListNode l){
        ListNode head=new ListNode(-1);
        head.next=l;
        ListNode current=head;
        while(current.next!=null&&current.next.next!=null){
           ListNode l1=current.next;
           ListNode l2=current.next.next;

           current.next=l2;
           l1.next=l2.next;
           l2.next=l1;
           current=l1;
        }
        return head.next;
    }


    //k个一组翻转链表
    public ListNode reversK(ListNode head,int k){
        if(head==null){
            return null;
        }
        ListNode dummy=new ListNode(-1);
        dummy.next=head;
        ListNode prev=dummy;
        ListNode current=dummy;
        while(current.next!=null){
            for(int i=0;i<k&&current!=null;i++){
                current=current.next;
            }
            if(current==null){
                break;
            }
            //记录k个节点后的第一个节点
            ListNode next=current.next;
            //记录k个节点的第一个节点
            ListNode start=prev.next;

            //断开前k个链表
            current.next=null;
            //反转k个节点,并链接
            prev.next=reverse(start);
            start.next=next;
            //继续下一轮k个节点的反转
            prev=start;
            current=prev;
        }
        return dummy.next;
    }

    //给定位置反转链表
    public ListNode reverseBetween(ListNode head,int left,int right){
        if(head==null){
            return null;
        }
        ListNode dummy=new ListNode(-1);
        dummy.next=head;
        ListNode leftPrev=dummy;
        ListNode current=dummy;

        for(int i=0;i<right&&current!=null;i++){
                if(i==left-1){
                    leftPrev=current;
                }
                current=current.next;
        }
        ListNode prev=leftPrev.next;
        ListNode next=current.next;
        current.next=null;
        leftPrev.next=reverse(prev);
        prev.next=next;
        return dummy.next;
    }


    public ListNode rotateRight(ListNode head,int k){
            if(head==null){
                return null;
            }
            ListNode tail=null;
            ListNode current=head;
            int len=0;
            //先获取链表的长度,并记录尾节点
            while(current!=null){
                tail=current;
                current=current.next;

                len++;
            }
            //循环向右移k位，实则把后k个元素放在链表的前面,若k过大,实则是把k/len的余数个放在链表的前面
            //故采用取模的方式
            int n=k%len;
            //遍历链表，获取前len-k个链表元素,并记录其最后一个节点
            ListNode p=head;
            for(int i=0;i<len-n-1;i++){
                p=p.next;
            }
            //1:尾节点的指向头节点
            tail.next=head;
            //2:头节点复制为前len-k的下一个节点
            head=p.next;
            //3:第len-k个节点置为尾节点
            p.next=null;
            return head;
    }

    public ListNode deleteDuplicate(ListNode head) {

        ListNode dummy=new ListNode(-1);
        dummy.next=head;
        ListNode current = dummy;
        while(current.next!=null&&current.next.next!=null){
           if(current.next.val==current.next.next.val){
               int x=current.next.val;
               //向后循环遍历，删除重复的节点
               while(current.next!=null&&current.next.val==x) {
                   current.next = current.next.next;
               }
           }else{
               current=current.next;
           }
        }
        return dummy.next;
    }

    public ListNode partition(ListNode head,int x){
        if(head==null){
            return null;
        }
        ListNode small=new ListNode(-1);
        ListNode smallHead=small;
        ListNode big=new ListNode(-1);
        ListNode bigHead=big;
        while(head!=null){
            if(head.val<x){
                small.next=head;
                small=small.next;
            }else{
                big.next=head;
                big=big.next;
            }
            head=head.next;
        }
        big.next=null;
        small.next=bigHead.next;
        return smallHead.next;



    }


    static class ListNode {
        int val;
        ListNode next;
        ListNode() {}
        ListNode(int val) { this.val = val; }
        ListNode(int val, ListNode next) { this.val = val; this.next = next; }

    }

    ListNode generateL1(){
        ListNode l1=new ListNode(1);
        ListNode a=new ListNode(4);
        ListNode b=new ListNode(3);
        ListNode c=new ListNode(2);
        ListNode d=new ListNode(5);
        ListNode e=new ListNode(2);
        //ListNode f=new ListNode(5);
        l1.next=a;
        a.next=b;
        b.next=c;
        c.next=d;
        d.next=e;
        e.next=null;
        //e.next=f;
        //f.next=null;
        return l1;
    }

    ListNode generateL2(){
        ListNode l2=new ListNode(0);
        ListNode a=new ListNode(1);
        ListNode b=new ListNode(2);
        l2.next=a;
        a.next=b;
        b.next=null;
        return l2;
    }

    String printListNode(ListNode l){
        StringBuilder sb=new StringBuilder();
        sb.append("[");
        while(l!=null){
            if(l.next==null){
                sb.append(l.val);
            }else{
                sb.append(l.val).append(",");
            }
            l=l.next;
        }
        sb.append("]");
        return sb.toString();
    }

    //反转链表
    private ListNode reverse(ListNode l){
        ListNode pre=null;
        ListNode current=l;
        while(current!=null){
            ListNode next=current.next;
            current.next=pre;
            pre=current;
            current=next;
        }

        return pre;

    }


}
